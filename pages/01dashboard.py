# pages/01_Dashboard.py
import streamlit as st
import pandas as pd
import database as db

# Configura o layout da p√°gina para ser largo
st.set_page_config(page_title="Dashboard de An√°lise", layout="wide")

# --- CONTROLE DE ACESSO ---
# Define a lista de nomes de usu√°rio que s√£o considerados administradores.
# Apenas estes usu√°rios poder√£o ver esta p√°gina.
ADMIN_USERS = ["gbsporto"] 

# Verifica se o usu√°rio est√° logado (authentication_status == True) E
# se o nome de usu√°rio da sess√£o atual est√° na lista de administradores.
if st.session_state.get("authentication_status") and st.session_state.get("username") in ADMIN_USERS:
    st.title("üìä Dashboard de An√°lise de Desempenho")

    # Busca todos os registos de a√ß√µes do banco de dados
    df_actions = db.get_all_user_actions()

    # Se n√£o houver dados, exibe um aviso
    if df_actions.empty:
        st.warning("Ainda n√£o h√° dados de a√ß√µes de usu√°rios para analisar.")
    else:
        # Converte a coluna de timestamp para o formato de data para melhor manipula√ß√£o
        df_actions['timestamp'] = pd.to_datetime(df_actions['timestamp'])

        st.header("Vis√£o Geral")
        
        # Calcula as m√©tricas gerais de desempenho
        total_decisoes = len(df_actions)
        total_acertos = len(df_actions[df_actions['outcome'] == 'acerto'])
        taxa_acerto_geral = (total_acertos / total_decisoes) * 100 if total_decisoes > 0 else 0
        
        # Exibe as m√©tricas em colunas
        col1, col2, col3 = st.columns(3)
        col1.metric("Total de Decis√µes Registadas", total_decisoes)
        col2.metric("Total de Acertos", total_acertos)
        col3.metric("Taxa de Acerto Geral (%)", f"{taxa_acerto_geral:.2f}%")

        st.divider()

        st.header("An√°lise por Usu√°rio")
        
        # Agrupa os dados para criar um resumo de desempenho por usu√°rio
        user_summary = df_actions.groupby('username').agg(
            total_decisoes=('outcome', 'count'),
            total_acertos=('outcome', lambda x: (x == 'acerto').sum())
        ).reset_index()
        user_summary['taxa_acerto'] = (user_summary['total_acertos'] / user_summary['total_decisoes']) * 100
        
        # Exibe a tabela de resumo
        st.dataframe(user_summary.sort_values(by='taxa_acerto', ascending=False), use_container_width=True)

        st.subheader("Taxa de Acerto por Usu√°rio (%)")
        # Exibe um gr√°fico de barras com a taxa de acerto de cada usu√°rio
        st.bar_chart(user_summary.set_index('username')['taxa_acerto'])
        
        st.divider()
        
        st.header("Atividade Recente")
        # Exibe as 10 a√ß√µes mais recentes registadas no sistema
        st.dataframe(df_actions.sort_values(by='timestamp', ascending=False).head(10), use_container_width=True)
else:
    # Se o usu√°rio n√£o estiver logado ou n√£o for um admin, exibe uma mensagem de erro
    st.error("Voc√™ n√£o tem permiss√£o para aceder a esta p√°gina. Por favor, fa√ßa o login como administrador.")

